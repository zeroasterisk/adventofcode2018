defmodule Fuel do
  @moduledoc """
  Documentation for Fuel.
  """
  # import Fuel.Helper
  require Logger

  # serial number
  @gsn 8561

  @doc """
  main do stuff

  ## Examples

      # iex> Fuel.main(:p1)
      # {"21,37", 30}

      # iex> Fuel.main(:p2)
      # {"236,146,12", 160}

  """
  def main(:p1) do
    grid = Fuel.grid()

    grid
    |> Enum.reduce(%{}, fn {{x, y}, _v}, acc ->
      sum = grid |> Fuel.sum_block({x, y}, 3)
      acc |> Map.put("#{x},#{y}", sum)
    end)
    |> Enum.sort_by(fn {_k, v} -> v end)
    |> List.last()
  end

  # def main(:p2_would_work_but_too_slow) do
  #   grid = Fuel.grid()
  #   # super brute force, all together now...
  #   for size <- 1..100, x <- 0..299, y <- 0..299 do
  #     {x, y, size}
  #   end
  #   |> Enum.reduce(%{}, fn({x, y, size}, acc) ->
  #     sum = grid |> Fuel.sum_block({x, y}, size)
  #     acc |> Map.put("#{x},#{y},#{size}", sum)
  #   end)
  #   |> Enum.sort_by(fn({_k, v}) -> v end)
  #   |> List.last()
  # end
  def main(:p2) do
    grid = Fuel.grid()
    # slightly less brute force, a map of grid sums by size (less in ram, just as much work)
    for size <- 2..250 do
      Task.async(fn ->
        out =
          grid
          |> Enum.filter(fn {{x, y}, _v} -> x + size < 300 && y + size < 300 end)
          |> Enum.reduce(%{}, fn {{x, y}, _v}, acc ->
            sum = grid |> Fuel.sum_block({x, y}, size)
            acc |> Map.put("#{x},#{y}", sum)
          end)
          |> Enum.filter(fn {_k, v} -> is_integer(v) && v > 0 end)
          |> Enum.sort_by(fn {_k, v} -> v end)
          |> List.last()

        case out do
          nil ->
            IO.puts("#{size} = NOTHING")
            nil

          {k, v} ->
            IO.puts("#{k},#{size} = #{v}")
            {"#{k},#{size}", v}
        end
      end)
    end
    |> Enum.map(fn f -> Task.await(f, 99_999_999) end)
    |> Enum.sort_by(fn {_k, v} -> v end)
    |> List.last()
  end

  def main(arg) do
    Logger.info("invoked main(#{inspect(arg)})")
    arg
  end

  def cruft do
    [
      {21, 37, 224, 30},
      {21, 37, 221, 30},
      {21, 37, 159, 30},
      {21, 37, 191, 30},
      {21, 37, 162, 30},
      {21, 37, 180, 30},
      {21, 37, 132, 30},
      {21, 37, 210, 30},
      {21, 37, 134, 30},
      {21, 37, 168, 30},
      {21, 37, 216, 30},
      {21, 37, 228, 30},
      {21, 37, 130, 30},
      {21, 37, 149, 30},
      {21, 37, 215, 30},
      {21, 37, 187, 30},
      {21, 37, 164, 30},
      {21, 37, 223, 30},
      {21, 37, 148, 30},
      {21, 37, 193, 30},
      {21, 37, 208, 30},
      {21, 37, 204, 30},
      {21, 37, 220, 30},
      {21, 37, 241, 30},
      {21, 37, 214, 30},
      {21, 37, 182, 30},
      {21, 37, 185, 30},
      {21, 37, 202, 30},
      {21, 37, 194, 30},
      {21, 37, 151, 30},
      {21, 37, 219, 30},
      {21, 37, 153, 30},
      {21, 37, 147, 30},
      {21, 37, 239, 30},
      {21, 37, 143, 30},
      {21, 37, 131, 30},
      {21, 37, 232, 30},
      {21, 37, 237, 30},
      {21, 37, 243, 30},
      {21, 37, 174, 30},
      {21, 37, 175, 30},
      {21, 37, 189, 30},
      {21, 37, 172, 30},
      {21, 37, 201, 30},
      {21, 37, 198, 30},
      {21, 37, 217, 30},
      {21, 37, 165, 30},
      {21, 37, 152, 30},
      {21, 37, 161, 30},
      {21, 37, 184, 30},
      {21, 37, 196, 30},
      {21, 37, 203, 30},
      {21, 37, 247, 30},
      {21, 37, 195, 30},
      {21, 37, 150, 30},
      {21, 37, 211, 30},
      {21, 37, 146, 30},
      {21, 37, 183, 30},
      {21, 37, 226, 30},
      {21, 37, 133, 30},
      {21, 37, 207, 30},
      {21, 37, 258, 30},
      {21, 37, 178, 30},
      {21, 37, 188, 30},
      {21, 37, 199, 30},
      {21, 37, 197, 30},
      {21, 37, 166, 30},
      {21, 37, 213, 30},
      {21, 37, 129, 30},
      {21, 37, 230, 30},
      {21, 37, 177, 30},
      {21, 37, 155, 30},
      {21, 37, 244, 30},
      {21, 37, 156, 30},
      {21, 37, 234, 30},
      {21, 37, 225, 30},
      {21, 37, 170, 30},
      {21, 37, 169, 30},
      {21, 37, 141, 30},
      {21, 37, 167, 30},
      {21, 37, 163, 30},
      {21, 37, 139, 30},
      {21, 37, 179, 30},
      {21, 37, 233, 30},
      {21, 37, 192, 30},
      {21, 37, 235, 30},
      {21, 37, 190, 30},
      {21, 37, 222, 30},
      {21, 37, 158, 30},
      {21, 37, 138, 30},
      {21, 37, 245, 30},
      {21, 37, 181, 30},
      {21, 37, 257, 30},
      {21, 37, 137, 30},
      {21, 37, 140, 30},
      {21, 37, 206, 30},
      {21, 37, 231, 30},
      {21, 37, 205, 30},
      {21, 37, 260, 30},
      {21, 37, 209, 30},
      {21, 37, 268, 30},
      {21, 37, 229, 30},
      {21, 37, 135, 30},
      {21, 37, 262, 30},
      {21, 37, 186, 30},
      {21, 37, 157, 30},
      {21, 37, 270, 30},
      {21, 37, 212, 30},
      {21, 37, 171, 30},
      {21, 37, 274, 30},
      {21, 37, 145, 30},
      {21, 37, 249, 30},
      {21, 37, 236, 30},
      {21, 37, 176, 30},
      {21, 37, 200, 30},
      {21, 37, 272, 30},
      {21, 37, 218, 30},
      {21, 37, 251, 30},
      {21, 37, 238, 30},
      {21, 37, 173, 30},
      {21, 37, 266, 30},
      {21, 37, 250, 30},
      {21, 37, 286, 30},
      {21, 37, 242, 30},
      {21, 37, 144, 30},
      {21, 37, 256, 30},
      {21, 37, 254, 30},
      {21, 37, 240, 30},
      {21, 37, 252, 30},
      {21, 37, 246, 30},
      {21, 37, 227, 30},
      {21, 37, 255, 30},
      {21, 37, 154, 30},
      {21, 37, 275, 30},
      {21, 37, 280, 30},
      {21, 37, 136, 30},
      {21, 37, 142, 30},
      {21, 37, 276, 30},
      {21, 37, 248, 30},
      {21, 37, 265, 30},
      {21, 37, 267, 30},
      {21, 37, 259, 30},
      {21, 37, 264, 30},
      {21, 37, 278, 30},
      {21, 37, 160, 30},
      {21, 37, 281, 30},
      {21, 37, 253, 30},
      {21, 37, 263, 30},
      {21, 37, 273, 30},
      {21, 37, 282, 30},
      {21, 37, 299, 30},
      {21, 37, 271, 30},
      {21, 37, 269, 30},
      {21, 37, 261, 30},
      {21, 37, 289, 30},
      {21, 37, 285, 30},
      {21, 37, 292, 30},
      {21, 37, 283, 30},
      {21, 37, 294, 30},
      {21, 37, 288, 30},
      {21, 37, 277, 30},
      {21, 37, 279, 30},
      {21, 37, 287, 30},
      {21, 37, 290, 30},
      {21, 37, 297, 30},
      {21, 37, 298, 30},
      {21, 37, 300, 30},
      {21, 37, 295, 30},
      {21, 37, 291, 30},
      {21, 37, 293, 30},
      {21, 37, 284, 30},
      {21, 37, 5, 30},
      {21, 37, 296, 30},
      {21, 37, 121, 30},
      {21, 37, 100, 30},
      {21, 37, 56, 30},
      {21, 37, 25, 30},
      {21, 37, 47, 30},
      {21, 37, 112, 30},
      {21, 37, 45, 30},
      {21, 37, 103, 30},
      {21, 37, 97, 30},
      {21, 37, 57, 30},
      {21, 37, 34, 30},
      {21, 37, 4, 30},
      {21, 37, 42, 30},
      {21, 37, 20, 30},
      {21, 37, 98, 30},
      {21, 37, 99, 30},
      {21, 37, 114, 30},
      {21, 37, 1, 30},
      {21, 37, 3, 30},
      {21, 37, 69, 30},
      {21, 37, 28, 30},
      {21, 37, 15, 30},
      {21, 37, 31, 30},
      {21, 37, 84, 30},
      {21, 37, 9, 30},
      {21, 37, 41, 30},
      {21, 37, 50, 30},
      {21, 37, 55, 30},
      {21, 37, 83, 30},
      {21, 37, 120, 30},
      {21, 37, 78, 30},
      {21, 37, 23, 30},
      {21, 37, 48, 30},
      {21, 37, 11, 30},
      {21, 37, 91, 30},
      {21, 37, 113, 30},
      {21, 37, 96, 30},
      {21, 37, 6, 30},
      {21, 37, 39, 30},
      {21, 37, 74, 30},
      {21, 37, 49, 30},
      {21, 37, 117, 30},
      {21, 37, 76, 30},
      {21, 37, 29, 30},
      {21, 37, 36, 30},
      {21, 37, 12, 30},
      {21, 37, 71, 30},
      {21, 37, 59, 30},
      {21, 37, 111, 30},
      {21, 37, 62, 30},
      {21, 37, 16, 30},
      {21, 37, 38, 30},
      {21, 37, 46, 30},
      {21, 37, 27, 30},
      {21, 37, 72, 30},
      {21, 37, 125, 30},
      {21, 37, 60, 30},
      {21, 37, 13, 30},
      {21, 37, 102, 30},
      {21, 37, 119, 30},
      {21, 37, 44, 30},
      {21, 37, 90, 30},
      {21, 37, 127, 30},
      {21, 37, 124, 30},
      {21, 37, 128, 30},
      {21, 37, 68, 30},
      {21, 37, 73, 30},
      {21, 37, 95, 30},
      {21, 37, 52, 30},
      {21, 37, 32, 30},
      {21, 37, 58, 30},
      {21, 37, 51, 30},
      {21, 37, 64, 30},
      {21, 37, 110, 30},
      {21, 37, 10, 30},
      {21, 37, 43, 30},
      {21, 37, 115, 30},
      {21, 37, 86, 30},
      {21, 37, 7, 30},
      {21, 37, 14, 30},
      {21, 37, 79, 30},
      {21, 37, 77, 30},
      {21, 37, 40, 30},
      {21, 37, 123, 30},
      {21, 37, 81, 30},
      {21, 37, 104, 30},
      {21, 37, 116, 30},
      {21, 37, 65, 30},
      {21, 37, 22, 30},
      {21, 37, 30, 30},
      {21, 37, 82, 30},
      {21, 37, 26, 30},
      {21, 37, 122, 30},
      {21, 37, 109, 30},
      {21, 37, 70, 30},
      {21, 37, 2, 30},
      {21, 37, 67, 30},
      {21, 37, 92, 30},
      {21, 37, 105, 30},
      {21, 37, 107, 30},
      {21, 37, 35, 30},
      {21, 37, 8, 30},
      {21, 37, 126, 30},
      {21, 37, 61, 30},
      {21, 37, 88, 30},
      {21, 37, 53, 30},
      {21, 37, 106, 30},
      {21, 37, 80, 30},
      {21, 37, 89, 30},
      {21, 37, 17, 30},
      {21, 37, 75, 30},
      {21, 37, 94, 30},
      {21, 37, 118, 30},
      {21, 37, 24, 30},
      {21, 37, 85, 30},
      {21, 37, 93, 30},
      {21, 37, 87, 30},
      {21, 37, 101, 30},
      {21, 37, 33, 30},
      {21, 37, 54, 30},
      {21, 37, 63, 30},
      {21, 37, 66, 30},
      {21, 37, 108, 30},
      {21, 37, 18, 30},
      {21, 37, 37, 30},
      {21, 37, 19, 30},
      {21, 37, 21, 30}
    ]
    |> Enum.filter(fn {x, y, size, v} -> x + size < 300 && y + size < 300 end)
    |> Enum.sort_by(fn {x, y, size, v} -> size end)
    |> IO.inspect()
  end

  @doc """
  sum of 3x3 block, starting at top-right

  iex> Fuel.grid() |> Fuel.sum_block({1, 1})
  -7

  iex> Fuel.grid(18) |> Fuel.sum_block({33, 45})
  29
  """
  def sum_block(grid, coords, n \\ 3)
  def sum_block(grid, {x, y}, n) when x + n > 300, do: 0
  def sum_block(grid, {x, y}, n) when y + n > 300, do: 0

  def sum_block(grid, {x, y}, n) do
    for xn <- 0..(n - 1), yn <- 0..(n - 1) do
      # IO.puts("#{x + xn}, #{y + yn} = #{Map.get(grid, {x + xn, y + yn}, 0)}")
      Map.get(grid, {x + xn, y + yn}, 0)
    end
    |> Enum.sum()
  end

  def sum_block_reducer({x, y}, %{n: 0, grid: grid, blocks: blocks}) do
    sum = sum_block(grid, {x, y})
    %{grid: grid, blocks: blocks |> Map.put("#{x},#{y}", sum)}
  end

  @doc """
  grid with my input
  """
  def grid(gsn \\ @gsn) do
    for x <- 0..300, y <- 0..300 do
      {x, y, gsn}
    end
    |> Enum.map(fn {x, y, g} -> {x, y, g, power({x, y, g})} end)
    |> Enum.reduce(%{}, fn {x, y, _g, v}, acc -> acc |> Map.put({x, y}, v) end)
  end

  @doc """
  Get power level for {x,y,grid_serial}

  ## Examples

      iex> Fuel.power({3, 5, 8})
      4

      iex> Fuel.power({122, 79, 57})
      -5

      iex> Fuel.power({217, 196, 39})
      0

      iex> Fuel.power({101, 153, 71})
      4

  """
  def power({x, y, g}) do
    rack_id = x + 10
    n = (rack_id * y + g) * rack_id
    h = n |> Integer.to_string() |> String.at(-3) |> String.to_integer()
    h - 5
  end

  @doc """
  Function does...

  ## Examples

      iex> Fuel.func_template(:todo)
      :todo

      iex> Fuel.func_template(:more)
      :more

  """
  def func_template(nil), do: :nope
  def func_template(true), do: :yep

  def func_template(arg) do
    # Logger.info "invoked func_template(#{inspect(arg)}) (no skip)"
    arg
  end
end
